// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using UchetNZP.Infrastructure.Data;

#nullable disable

namespace UchetNZP.Infrastructure.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251015061251_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("UchetNZP.Domain.Entities.ImportJob", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.ToTable("ImportJobs", (string)null);
                });

            modelBuilder.Entity("UchetNZP.Domain.Entities.ImportJobItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<Guid>("ImportJobId")
                        .HasColumnType("uuid");

                    b.Property<string>("Payload")
                        .HasMaxLength(4096)
                        .HasColumnType("character varying(4096)");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.HasIndex("ImportJobId", "ExternalId")
                        .IsUnique();

                    b.ToTable("ImportJobItems", (string)null);
                });

            modelBuilder.Entity("UchetNZP.Domain.Entities.Operation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Operations", (string)null);
                });

            modelBuilder.Entity("UchetNZP.Domain.Entities.Part", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Parts", (string)null);
                });

            modelBuilder.Entity("UchetNZP.Domain.Entities.PartRoute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("NormHours")
                        .HasPrecision(10, 3)
                        .HasColumnType("numeric(10,3)");

                    b.Property<int>("OpNumber")
                        .HasColumnType("integer");

                    b.Property<Guid>("OperationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PartId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SectionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OperationId");

                    b.HasIndex("SectionId");

                    b.HasIndex("PartId", "OpNumber")
                        .IsUnique();

                    b.ToTable("PartRoutes", (string)null);
                });

            modelBuilder.Entity("UchetNZP.Domain.Entities.Section", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Sections", (string)null);
                });

            modelBuilder.Entity("UchetNZP.Domain.Entities.WipBalance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("OpNumber")
                        .HasColumnType("integer");

                    b.Property<Guid>("PartId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(12, 3)
                        .HasColumnType("numeric(12,3)");

                    b.Property<Guid>("SectionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SectionId");

                    b.HasIndex("PartId", "SectionId", "OpNumber")
                        .IsUnique();

                    b.ToTable("WipBalances", (string)null);
                });

            modelBuilder.Entity("UchetNZP.Domain.Entities.WipLaunch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("DocumentNumber")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<DateTime>("LaunchDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PartId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(12, 3)
                        .HasColumnType("numeric(12,3)");

                    b.Property<Guid>("SectionId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("SumHoursToFinish")
                        .HasPrecision(12, 3)
                        .HasColumnType("numeric(12,3)");

                    b.HasKey("Id");

                    b.HasIndex("SectionId");

                    b.HasIndex("PartId", "SectionId", "LaunchDate");

                    b.ToTable("WipLaunches", (string)null);
                });

            modelBuilder.Entity("UchetNZP.Domain.Entities.WipLaunchOperation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Hours")
                        .HasPrecision(12, 3)
                        .HasColumnType("numeric(12,3)");

                    b.Property<int>("OpNumber")
                        .HasColumnType("integer");

                    b.Property<Guid>("OperationId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PartRouteId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(12, 3)
                        .HasColumnType("numeric(12,3)");

                    b.Property<Guid>("SectionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WipLaunchId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OperationId");

                    b.HasIndex("PartRouteId");

                    b.HasIndex("SectionId");

                    b.HasIndex("WipLaunchId", "OpNumber")
                        .IsUnique();

                    b.ToTable("WipLaunchOperations", (string)null);
                });

            modelBuilder.Entity("UchetNZP.Domain.Entities.WipReceipt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("DocumentNumber")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<int>("OpNumber")
                        .HasColumnType("integer");

                    b.Property<Guid>("PartId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(12, 3)
                        .HasColumnType("numeric(12,3)");

                    b.Property<DateTime>("ReceiptDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("SectionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SectionId");

                    b.HasIndex("PartId", "SectionId", "OpNumber", "ReceiptDate");

                    b.ToTable("WipReceipts", (string)null);
                });

            modelBuilder.Entity("UchetNZP.Domain.Entities.ImportJobItem", b =>
                {
                    b.HasOne("UchetNZP.Domain.Entities.ImportJob", "ImportJob")
                        .WithMany("Items")
                        .HasForeignKey("ImportJobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ImportJob");
                });

            modelBuilder.Entity("UchetNZP.Domain.Entities.PartRoute", b =>
                {
                    b.HasOne("UchetNZP.Domain.Entities.Operation", "Operation")
                        .WithMany("PartRoutes")
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("UchetNZP.Domain.Entities.Part", "Part")
                        .WithMany("Routes")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UchetNZP.Domain.Entities.Section", "Section")
                        .WithMany("PartRoutes")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Operation");

                    b.Navigation("Part");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("UchetNZP.Domain.Entities.WipBalance", b =>
                {
                    b.HasOne("UchetNZP.Domain.Entities.Part", "Part")
                        .WithMany("WipBalances")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UchetNZP.Domain.Entities.Section", "Section")
                        .WithMany("WipBalances")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Part");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("UchetNZP.Domain.Entities.WipLaunch", b =>
                {
                    b.HasOne("UchetNZP.Domain.Entities.Part", "Part")
                        .WithMany("WipLaunches")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UchetNZP.Domain.Entities.Section", "Section")
                        .WithMany("WipLaunches")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Part");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("UchetNZP.Domain.Entities.WipLaunchOperation", b =>
                {
                    b.HasOne("UchetNZP.Domain.Entities.Operation", "Operation")
                        .WithMany("WipLaunchOperations")
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("UchetNZP.Domain.Entities.PartRoute", "PartRoute")
                        .WithMany("WipLaunchOperations")
                        .HasForeignKey("PartRouteId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("UchetNZP.Domain.Entities.Section", "Section")
                        .WithMany("WipLaunchOperations")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("UchetNZP.Domain.Entities.WipLaunch", "WipLaunch")
                        .WithMany("Operations")
                        .HasForeignKey("WipLaunchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Operation");

                    b.Navigation("PartRoute");

                    b.Navigation("Section");

                    b.Navigation("WipLaunch");
                });

            modelBuilder.Entity("UchetNZP.Domain.Entities.WipReceipt", b =>
                {
                    b.HasOne("UchetNZP.Domain.Entities.Part", "Part")
                        .WithMany("WipReceipts")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UchetNZP.Domain.Entities.Section", "Section")
                        .WithMany("WipReceipts")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Part");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("UchetNZP.Domain.Entities.ImportJob", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("UchetNZP.Domain.Entities.Operation", b =>
                {
                    b.Navigation("PartRoutes");

                    b.Navigation("WipLaunchOperations");
                });

            modelBuilder.Entity("UchetNZP.Domain.Entities.Part", b =>
                {
                    b.Navigation("Routes");

                    b.Navigation("WipBalances");

                    b.Navigation("WipLaunches");

                    b.Navigation("WipReceipts");
                });

            modelBuilder.Entity("UchetNZP.Domain.Entities.PartRoute", b =>
                {
                    b.Navigation("WipLaunchOperations");
                });

            modelBuilder.Entity("UchetNZP.Domain.Entities.Section", b =>
                {
                    b.Navigation("PartRoutes");

                    b.Navigation("WipBalances");

                    b.Navigation("WipLaunchOperations");

                    b.Navigation("WipLaunches");

                    b.Navigation("WipReceipts");
                });

            modelBuilder.Entity("UchetNZP.Domain.Entities.WipLaunch", b =>
                {
                    b.Navigation("Operations");
                });
#pragma warning restore 612, 618
        }
    }
}
